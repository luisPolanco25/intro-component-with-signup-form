{"version":3,"sources":["context/ErrorContext.js","components/login/LoginForm.js","hooks/useForm.js","components/template/Template.js","IntroApp.js","index.js","assets/icon-error.svg"],"names":["ErrorContext","createContext","LoginForm","initialState","useState","values","setValues","useContext","setIsFormValueCorrect","reset","handleInputChange","target","name","value","previousValues","useForm","firstName","lastName","email","password","formValues","isFormValueCorrect","id","onSubmit","e","preventDefault","trim","previousValue","validator","isEmail","Swal","fire","style","border","aria-label","type","placeholder","autoComplete","autoFocus","onChange","className","display","alt","src","errorIcon","href","Template","IntroApp","undefined","Provider","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b8771ac2.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\n\r\nexport const ErrorContext = createContext();","import React, { useContext } from 'react';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport './login-form.css';\r\nimport errorIcon from '../../assets/icon-error.svg';\r\nimport { ErrorContext } from '../../context/ErrorContext';\r\nimport validator from 'validator';\r\nimport Swal from 'sweetalert2';\r\n\r\nexport const LoginForm = () => {\r\n\r\n    const [formValues, handleInputChange] = useForm({\r\n        firstName: 'Jonathan ',\r\n        lastName: '',\r\n        email: '',\r\n        password: '',\r\n    });    \r\n\r\n    const {isFormValueCorrect, setIsFormValueCorrect} = useContext(ErrorContext);\r\n\r\n    const {firstName, lastName, email, password} = formValues;\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (firstName.trim() === '') {\r\n            setIsFormValueCorrect(previousValue => ({...previousValue, firstName: false}));\r\n        } else if (lastName.trim() === '') {\r\n            setIsFormValueCorrect(previousValue => ({...previousValue, lastName: false}));\r\n        } else if (!validator.isEmail(email)) {\r\n            setIsFormValueCorrect(previousValue => ({...previousValue, email: false}));\r\n        } else if (password.trim() === '') {\r\n            setIsFormValueCorrect(previousValue => ({...previousValue, password: false}));\r\n        } else {\r\n            Swal.fire('', 'We\\'ll get in touch with you shortly', 'success');\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div id=\"login-area\">\r\n\r\n            <div id=\"try-free\">\r\n                <p>Try it free 7 days then $20/mo. thereafter</p>\r\n            </div>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n\r\n                <input \r\n                    style={(isFormValueCorrect.firstName === false) ? {border: '2px solid hsl(0, 100%, 74%)'} : null}\r\n                    aria-label=\"first name\" \r\n                    name=\"firstName\"\r\n                    type=\"text\"\r\n                    placeholder=\"First name\"\r\n                    autoComplete=\"off\"\r\n                    autoFocus\r\n                    value={firstName}\r\n                    onChange={handleInputChange}\r\n                />\r\n                \r\n                <p \r\n                    className=\"error-text\"\r\n                    style={(isFormValueCorrect.firstName === false) ? {display:'block'} : null}\r\n                >\r\n                    First name cannot be empty\r\n                </p>\r\n                <img \r\n                    className=\"error-image\" \r\n                    alt=\"Error\" \r\n                    src={errorIcon} \r\n                    style={(isFormValueCorrect.firstName === false) ? {display: 'block'} : null}\r\n                />\r\n\r\n                <input \r\n                    style={(isFormValueCorrect.lastName === false) ? {border: '2px solid hsl(0, 100%, 74%)'} : null}\r\n                    aria-label=\"last name\" \r\n                    name=\"lastName\"\r\n                    type=\"text\"\r\n                    placeholder=\"Last name\"\r\n                    autoComplete=\"off\"\r\n                    value={lastName}\r\n                    onChange={handleInputChange}\r\n                />\r\n                \r\n                <p \r\n                    className=\"error-text\"\r\n                    style={(isFormValueCorrect.lastName === false) ? {display: 'block'} : null}\r\n                >\r\n                    Last name cannot be empty\r\n                </p>\r\n                <img \r\n                    className=\"error-image\" \r\n                    alt=\"Error\" \r\n                    src={errorIcon} \r\n                    style={(isFormValueCorrect.lastName === false) ? {display: 'block'} : null}\r\n                />\r\n                \r\n                <input \r\n                    style={(isFormValueCorrect.email === false) ? {border: '2px solid hsl(0, 100%, 74%)'} : null}\r\n                    aria-label=\"email address\" \r\n                    name=\"email\"\r\n                    type=\"text\" \r\n                    placeholder=\"Email address\"\r\n                    autoComplete=\"off\"\r\n                    value={email}\r\n                    onChange={handleInputChange}\r\n                />\r\n\r\n                <p \r\n                    className=\"error-text\"\r\n                    style={(isFormValueCorrect.email === false) ? {display: 'block'} : null}\r\n                >\r\n                    Looks like this is not an email\r\n                </p>\r\n                <img \r\n                    className=\"error-image\" \r\n                    alt=\"Error\" \r\n                    src={errorIcon} \r\n                    style={(isFormValueCorrect.email === false) ? {display: 'block'} : null}\r\n                />\r\n\r\n                <input \r\n                    style={(isFormValueCorrect.password === false) ? {border: '2px solid hsl(0, 100%, 74%)'} : null}\r\n                    aria-label=\"password\" \r\n                    name=\"password\"\r\n                    type=\"password\" \r\n                    placeholder=\"Password\"\r\n                    autoComplete=\"off\"\r\n                    value={password}\r\n                    onChange={handleInputChange}\r\n                />\r\n\r\n                <p \r\n                    className=\"error-text\"\r\n                    style={(isFormValueCorrect.password === false) ? {display: 'block'} : null}\r\n                >\r\n                    Password cannot be empty\r\n                </p>\r\n                <img \r\n                    className=\"error-image\" \r\n                    alt=\"Error\" \r\n                    src={errorIcon} \r\n                    style={(isFormValueCorrect.password === false) ? {display: 'block'} : null}\r\n                />\r\n\r\n                <button type=\"submit\">CLAIM YOUR FREE TRIAL</button>\r\n                <p id=\"terms\">By clicking the button, you are agreeing to our <a href=\"https://luispolanco25.github.io/intro-component-with-signup-form\">Terms and Services</a></p>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import { useContext, useState } from 'react';\r\nimport { ErrorContext } from '../context/ErrorContext';\r\n\r\nexport const useForm = (initialState = {}) => {\r\n\r\n    const [values, setValues] = useState(initialState);\r\n    const {setIsFormValueCorrect} = useContext(ErrorContext);\r\n    const reset = () => {\r\n        setValues(initialState);\r\n    }\r\n\r\n    const handleInputChange = ({target}) => {\r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value,\r\n        });\r\n        \r\n        setIsFormValueCorrect((previousValues) => ({\r\n            ...previousValues,\r\n            [target.name]: true}))\r\n\r\n    }\r\n    \r\n\r\n\r\n    return [values, handleInputChange, reset];\r\n}","import React from 'react';\r\nimport { LoginForm } from '../login/LoginForm';\r\nimport './template.css';\r\n\r\nexport const Template = () => {\r\n    return (\r\n        <main>\r\n\r\n            <div id=\"page-text\">\r\n                <h1>Learn to code by watching others</h1>\r\n                <p>\r\n                    See how experienced developers solve problems in real-time. Watching scripted tutorials is great, \r\n                    but understanding how developers think is invaluable.\r\n                </p>  \r\n            </div>\r\n\r\n            <LoginForm />\r\n        </main>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Template } from './components/template/Template'\r\nimport { ErrorContext } from './context/ErrorContext'\r\n\r\nexport const IntroApp = () => {\r\n\r\n    const [isFormValueCorrect, setIsFormValueCorrect] = useState({\r\n        firstName: undefined,\r\n        lastName: undefined,\r\n        email: undefined,\r\n        password: undefined,\r\n    });\r\n\r\n    return (\r\n        <ErrorContext.Provider value={{isFormValueCorrect, setIsFormValueCorrect}} >\r\n            <Template />\r\n        </ErrorContext.Provider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { IntroApp } from './IntroApp';\n\n\nReactDOM.render(\n    <IntroApp />,\n  document.getElementById('root')\n);\n\n","module.exports = __webpack_public_path__ + \"static/media/icon-error.eb2c6ce2.svg\";"],"sourceRoot":""}